set nu
set ts=4
set expandtab
set laststatus=2
set showmode
"set autoindent"
"set smartindent"
set showmatch
set encoding=utf-8

set cmdheight=6  " 状态行高度

set background=dark
"colorscheme solarized
"colorscheme molokai
"colorscheme phd

set cursorcolumn
set cursorline
highlight CursorLine   cterm=NONE ctermbg=yellow ctermfg=green guibg=NONE guifg=NONE
highlight CursorColumn cterm=NONE ctermbg=yellow ctermfg=green guibg=NONE guifg=NONE

set t_Co=256

set scrolloff=7
" 禁止折行
set nowrap

" 让配置变更立即生效
autocmd BufWritePost $MYVIMRC source $MYVIMRC


" 定义快捷键的前缀，即<Leader>
let mapleader=";"

" 开启文件类型侦测
filetype on
" 根据侦测到的不同类型加载对应的插件
filetype plugin on


set pythonthreedll=python35.dll


" Startup {{{
filetype indent plugin on


" Lang & Encoding {{{
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set encoding=utf-8
set langmenu=zh_CN.UTF-8
let $LANG = 'en_US.UTF-8'
"language messages zh_CN.UTF-8
" }}}

"Vim 在与屏幕/键盘交互时使用的编码(取决于实际的终端的设定)        
set encoding=utf-8
set langmenu=zh_CN.UTF-8
" 设置打开文件的编码格式  
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1 
set fileencoding=utf-8




" GUI {{{
colorscheme murphy

source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
set cursorline
set hlsearch
set number
" 
set lines=35 columns=140
" 
set splitbelow
set splitright
"
set guioptions-=T
set guioptions-=m
set guioptions-=L
set guioptions-=r
set guioptions-=b
" 
set guioptions-=e
set nolist

"set guifont=Inconsolata:h12:cANSI
set guifont=Consolas_for_Powerline_FixedD:h12:cANSI
" set guifont=Cousine_NF:h12
" set guifont=DroidSansMonoForPowerline_NF:h12:cANSI:qDRAFT

" }}}





"
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize

set rtp+=$VIM/gvimfiles/bundle/Vundle.vim
let path='$VIM/gvimfiles/bundle/'
call vundle#begin(path)

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'L9'

" 可视化的缩进
Plugin 'nathanaelkane/vim-indent-guides'

Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'majutsushi/tagbar'

" 彩虹括号增强版 Rainbow
Plugin 'luochen1990/rainbow'  

" 语法检查的插件  ale
Plugin 'w0rp/ale'

" ctrlp 文件搜索插件
Plugin 'ctrlpvim/ctrlp.vim'


" vim-devicons vim icons  文件类型 图标

Plugin 'ryanoasis/vim-devicons' " 需要配置字体 否则会导致乱码出现

" All of your Plugins must be added before the following line

call vundle#end()            " required
filetype plugin indent on    " required




map <F3> :NERDTreeMirror<CR>
map <F3> :NERDTreeToggle<CR>
" 将 NERDTree 的窗口设置在 vim 窗口的右侧（默认为左侧）
" let NERDTreeWinPos="right"
" 在 vim 启动的时候默认开启 NERDTree（autocmd 可以缩写为 au）
" autocmd VimEnter * NERDTree

" 可视化的缩进  配置
" 随 vim 自启动
" let g:indent_guides_enable_on_vim_startup=1
" 从第二层开始可视化显示缩进
let g:indent_guides_start_level=2
" 色块宽度
let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
:nmap <silent> <Leader>i <Plug>IndentGuidesToggle




let g:airline_theme="molokai" 

"这个是安装字体后 必须设置此项" 
let g:airline_powerline_fonts = 1   

 "打开tabline功能,方便查看Buffer和切换,省去了minibufexpl插件
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1


"设置切换Buffer快捷键"
 nnoremap <C-tab> :bn<CR>
 nnoremap <C-s-tab> :bp<CR>


" 关闭状态显示空白符号计数
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#whitespace#symbol = '!'
" 设置consolas字体"前面已经设置过
"set guifont=Consolas\ for\ Powerline\ FixedD:h11
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.crypt = '🔒'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.maxlinenr = '☰'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.spell = 'Ꞩ'
let g:airline_symbols.notexists = '∄'
let g:airline_symbols.whitespace = 'Ξ'
" old vim-powerline symbols
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_symbols.branch = '⭠'
let g:airline_symbols.readonly = '⭤'
let g:airline_symbols.linenr = '⭡'





" tagbar 配置
let g:tagbar_ctags_bin='D:/implement/ctags58/ctags.exe'
nmap <F4> :TagbarToggle<CR>
" 启动时自动focus
" let g:tagbar_autofocus = 1


" rainbow 配置
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle


" ale 配置




" ctrlp 配置
let g:ctrlp_map = '<leader>p' " 即 ;p
let g:ctrlp_cmd = 'CtrlP'
map <leader>f :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1






source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction




" 缓存文件保存设置
set noswapfile
set nobackup
set noundofile